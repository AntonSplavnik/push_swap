int	find_correct_position(t_stacks *stacks, int num)
{
	int	i;
	int	max;
	int	min;

	if (stacks->stack_b_len == 0)
		return (0);
	max = find_max(stacks);
	min = find_min(stacks);
	i = stacks->stack_b_len - 1;
	if (num > max || num < min)
	{
		while (i >= 0)
		{
			if (stacks->stack_b[i] == max)
				return (i);
			i--;
		}
		return (stacks->stack_b_len - 1);
	}
	i = stacks->stack_b_len - 1;
	while (i > 0)
	{
		if (stacks->stack_b[i] > num && stacks->stack_b[i - 1] < num)
			return (i);
		i --;
	}
	return (0);
}

explain the function


int ft_abs(int num)
{
	if (num < 0)
		return (num * -1);
	else
		return (num);
}


int	find_index(int	*stack, int len, int averadge)
{
	int	i;

	i = len - 1;
	while(i >= 0)
	{
		if (stack[i] == averadge)
			return (i);
		i--;
	}
	return (-1);
}

int	find_index(int	*stack, int len, int averadge)
{
	int	closest_number = stack[len - 1];
	int	closest_diff = abs(closest_number - averadge);

	int i = len - 2;
	while (i >= 0)
	{
		int	diff = abs(stack[i] - averadge);
		if (diff < closest_diff)
			closest_diff = diff;
		i--;
	}

}